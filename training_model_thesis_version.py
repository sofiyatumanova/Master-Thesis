# -*- coding: utf-8 -*-
"""THESIS Version.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1xMz6DHMt2do7OEN1_O-v0SYnpo7QjGV_
"""

# =======================
# YOLOv8 Object Detection (OBB) Training in Google Colab
# =======================

    # 1. Install Ultralytics (YOLOv8+ with OBB support)
!pip install ultralytics --upgrade -q

    # 2️. Check GPU availability
import torch
print("CUDA available:", torch.cuda.is_available())
print("Device name:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "No GPU detected")

    # 3. Import libraries
    # Main YOLOv8 library for loading, training, evaluating, and
    # predicting with object detection models
from ultralytics import YOLO
    # Handles operating system operations like file paths, directories,
    # and listing files
import os
    # 'drive' mounts Google Drive to save results; 'files' allows
    # uploading/downloading files in Colab
from google.colab import drive, files
    # Plotting library, useful for visualizing training metrics,
    # predictions, and images
import matplotlib.pyplot as plt
    # Displays images inline in Colab notebooks for easy visualization
from IPython.display import Image, display

    # 4. Upload the zipped file from Roboflow containing annotated
    # images in YOLO OBB format
uploaded = files.upload()

    # Unzipping dataset from Roboflow
!unzip -q '*.zip' -d ./custom_dataset

    # Verify paths
!ls ./custom_dataset
    # should contain the following files:
    # data.yaml  README.roboflow.txt	test  train  valid

    # 5. Set path to your custom YAML
DATA_YAML_PATH = './custom_dataset/data.yaml'

    # 6. Load pretrained YOLO OBB model such as yolov8n-obb.pt
    # (fine-tune on custom data)
model = YOLO('yolov8n-obb.pt', task="obb")

    # 7. Train on your dataset
results = model.train(
    data=DATA_YAML_PATH,
    epochs=100,           # Number of training epochs
    imgsz=640,            # Input image size
    batch=16,             # Batch size (adjust for GPU memory)
    name='yolov8n-obb_exp1',
    project='runs/obb',
    save=True,            # Save checkpoints
    save_period=10,       # Save every 10 epochs
    patience=30,          # Stop early if metrics don't improve
    task="obb")           # Important for oriented bounding boxes

    # 8. Downloading the best model weights locally to Downloads
    # Important for application of model and model comparisons
from google.colab import files
files.download("runs/obb/yolov8n-obb_exp1/weights/best.pt")

    # Optional: Save entire experiment to Google Drive
drive.mount('/content/drive')
    #Saving the entire results folder to Drive
!cp -r runs/obb/yolov8n-obb_exp1 /content/drive/MyDrive/yolo_models/

    # 9. Evaluate the model on the validation set
metrics = model.val(data=DATA_YAML_PATH, task="obb")
print(f"mAP50-95: {metrics.box.map:.3f}, mAP50: {metrics.box.map50:.3f}")

    # 10. Predict on your test set images
TEST_IMAGES_DIR = './custom_dataset/test/images'

pred_results = model.predict(
    source=TEST_IMAGES_DIR,
    save=True,        # Save prediction images
    save_txt=True,    # Save bounding boxes in text files
    save_conf=True,   # Save confidence scores
    imgsz=640,
    conf=0.25,        # Only predictions with conf>or=0.25 are kept
    task="obb"        # This parameter is critical for OBB
)

    # OPTIONAL: Display Predictions in Google Colab for a quick overview
result_dir = "runs/obb/yolov8n-obb_exp13"
for img_file in sorted(os.listdir(result_dir)):
    if img_file.endswith('.jpg') or img_file.endswith('.png'):
        display(Image(filename=os.path.join(result_dir, img_file)))

    # 11. Evaluate on test set and save metrics
metrics_test = model.val(
    data=DATA_YAML_PATH,
    split="test",            # Use test set
    task="obb",              # IMPORTANT for oriented bounding boxes
    save_json=True,          # Save metrics as JSON
    save_hybrid=True,        # Combine predictions with metrics
    save_conf=True           # Save the confidence score
)

print(f"Test set mAP50-95: {metrics_test.box.map:.3f}, mAP50: {metrics_test.box.map50:.3f}")

    # OPTIONAL: Download the entire test results folder from Colab
import shutil
from google.colab import files

# Path to your specific YOLO run folder (adjust exp number if needed)
results_folder = "runs/obb/yolov8n-obb_exp14"

    # Zip the folder
shutil.make_archive("yolov8n-obb_exp14_results", 'zip', results_folder)

    # Download the zipped folder
files.download("yolov8n-obb_exp14_results.zip")